################################################################################
# Copyright (c) 2019-2020, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
################################################################################

================================================================================
DeepStream SDK Python Bindings
================================================================================
Setup pre-requisites:
- Ubuntu 18.04
- NVIDIA DeepStream SDK 5.0 Developer Preview
- Python 3.6
- Gst-python


docker run -d --name kafka -p 9092:9092 -e KAFKA_ADVERTISED_HOST_NAME=localhost -e KAFKA_CREATE_TOPICS="ds_meta:1:1" blacktop/kafka

docker start -ai kafka


External (Docker compose)
kafkacat -b localhost:9092 -t ds_meta

kafkacat -b localhost:9092 -t ds_meta_msg -P

docker build -t deepstream-python -f Dockerfile .

docker run -it --rm --net=host --gpus=all -e STREAM0="rtsp://Matlock:Xaxteh39@192.168.1.75:554/videoMain" -e KAFKA_BROKER=localhost -e PUB_TOPIC:ds_meta -e SUB_TOPIC:ds_meta_msg -e DISPLAY=$DISPLAY -v /media/morpheus/datos/workspace/deepstream-python/deepstream/apps:/opt/nvidia/deepstream/deepstream/sources/python/apps -v /tmp/.X11-unix:/tmp/.X11-unix deepstream-python

python3 deepstream_acn_kafka.py rtsp://Matlock:Xaxteh39@192.168.1.75:554/videoMain

--------------------------------------------------------------------------------
Package Contents
--------------------------------------------------------------------------------
The DeepStream Python package includes:
1. Python bindings for DeepStream Metadata libraries
   These bindings are provided as a compiled module, available for
   x86_64 and Jetson platforms. Find them at:
   bindings
      |- x86_64
      |     |- pyds.so
      |- jetson
            |- pyds.so
2. DeepStream test apps in Python
   The following test apps are available:
   deepstream-test1
   deepstream-test2
   deepstream-test3
   deepstream-test4
   deepstream-imagedata-multistream
   deepstream-ssd-parser
   deepstream-test1-rtsp-out
   deepstream-test1-usbcam

--------------------------------------------------------------------------------
Installing Pre-requisites:
--------------------------------------------------------------------------------

DeepStream SDK 5.0 Developer Preview
--------------------
Download and install from https://developer.nvidia.com/deepstream-download

Python 3.6
----------
Should be already installed with Ubuntu 18.04

Gst-python
----------
Should be already installed on Jetson
If missing, install with the following steps:
$ sudo apt update
$ sudo apt install python3-gi python3-dev python3-gst-1.0 -y

--------------------------------------------------------------------------------
Running the samples
--------------------------------------------------------------------------------
The apps are configured to work from inside the DeepStream SDK 5.0 installation.
Untar the contents into <DeepStream install root>/sources/.

Note that the apps import the pyds module from this relative path:
../bindings/<platform>

Follow README in each app's directory to run the app.

Example: running test1 app:
$ cd deepstream-test1
$ python3 deepstream_test_1.py <input .h264 file>

--------------------------------------------------------------------------------
Running the samples inside DeepStream SDK docker
--------------------------------------------------------------------------------
The general steps are:
1. Pull the DeepStream SDK docker of choice following the latest DeepStream
   Release Notes at https://developer.nvidia.com/deepstream-sdk for more info.
   Note that the deepstream-ssd-parser app requires the Triton docker on x86_64.
2. Run the docker with Python Bindings mapped using the following option:
   -v <path to this python bindings directory>:/opt/nvidia/deepstream/deepstream-5.0/sources/python
3. Inside the container, install packages required by all samples:
   $ sudo apt update
   $ sudo apt install python3-gi python3-dev python3-gst-1.0 -y
4. Optionally install additional dependencies required by specific samples.
   See README in app's directory for such requirements.
   $ sudo apt install python3-opencv
   $ sudo apt install python3-numpy
   $ sudo apt install libgstrtspserver-1.0-0 gstreamer1.0-rtsp
   $ sudo apt install libgirepository1.0-dev
   $ sudo apt install gobject-introspection gir1.2-gst-rtsp-server-1.0
5. Run sample apps following directions in each app's README.

--------------------------------------------------------------------------------
Notes:
--------------------------------------------------------------------------------
As with DeepStream SDK, if the application runs into errors, cannot create gst elements, 
try again after removing gstreamer cache
   rm ${HOME}/.cache/gstreamer-1.0/registry.x86_64.bin




docker build --rm -t deepstream-python -f Dockerfile .

xhost +
docker run -it --rm --net=host --gpus=all -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix deepstream-python

python3 deepstream_test_3.py rtsp://Matlock:Xaxteh39@192.168.1.75:554/videoMain rtsp://matlock:Xaxteh39@192.168.1.91:554/videoMain


python3 deepstream_test_4.py -i /opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 -p /opt/nvidia/deepstream/deepstream/lib/libnvds_kafka_proto.so --conn-str="192.168.1.69;2181;ds_meta"